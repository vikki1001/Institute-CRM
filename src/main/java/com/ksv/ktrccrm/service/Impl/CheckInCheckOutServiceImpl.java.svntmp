package com.ksv.ktrccrm.service.Impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mobile.device.Device;
import org.springframework.stereotype.Service;

import com.ksv.ktrccrm.constant.ProdConstant;
import com.ksv.ktrccrm.dao.CheckInCheckOutDao;
import com.ksv.ktrccrm.db1.entities.CheckInCheckOut;
import com.ksv.ktrccrm.db1.entities.EmpPersonalDetails;
import com.ksv.ktrccrm.service.CheckInCheckOutService;

@Service
public class CheckInCheckOutServiceImpl implements CheckInCheckOutService {
	private static final Logger LOGGER = LogManager.getLogger(CheckInCheckOutServiceImpl.class);

	@Autowired
	private CheckInCheckOutDao checkInCheckOutDao;

	/* Display All Emp in CheckInOut */
	@Override
	public List<CheckInCheckOut> getcheckInOutList() throws Exception {
		List<CheckInCheckOut> checkInOutList = new ArrayList<>();
		try {
			checkInOutList = checkInCheckOutDao.getcheckInOutList();
		} catch (Exception e) {
			LOGGER.error("Error occur while display all  checkInOut list" + ExceptionUtils.getStackTrace(e));
		}
		return checkInOutList;
	}

	/* Display data using from date, to date, UserId & tenantId */
	@Override
	public List<CheckInCheckOut> findByDateorUserIdorTenantId(String from, String to, String userId, String tenantId)
			throws Exception {
		try {
			if (!from.isEmpty() && !to.isEmpty() && ProdConstant.ALL.equalsIgnoreCase(userId) && ProdConstant.ALL.equalsIgnoreCase(tenantId)) {
				return checkInCheckOutDao.findAllEmp(from, to);
			} else if (!from.isEmpty() && !to.isEmpty() && !tenantId.isEmpty() && ProdConstant.ALL.equalsIgnoreCase(userId)) {
				return checkInCheckOutDao.findByDateorTenantId(from, to, tenantId);
			} else if (!from.isEmpty() && !to.isEmpty() && !userId.isEmpty() && ProdConstant.ALL.equalsIgnoreCase(tenantId)) {
				return checkInCheckOutDao.findByDateorUserId(from, to, userId);
			} else if (!from.isEmpty() && !to.isEmpty() && !userId.isEmpty() && !tenantId.isEmpty()) {
				return checkInCheckOutDao.findByDateorUserIdorTenantId(from, to, userId, tenantId);
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display findByDateorUserId checkInOut list"+ ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public CheckInCheckOut saveCheckIn(CheckInCheckOut checkInCheckOut, Device device, HttpServletRequest request) throws Exception {
		try {
			checkInCheckOutDao.saveCheckIn(checkInCheckOut, device, request);
		} catch (Exception e) {
			LOGGER.error("Error occur while save checkIn data /n" + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public CheckInCheckOut saveCheckOut(CheckInCheckOut checkInCheckOut, Device device, HttpServletRequest request) throws Exception {
		try {
			checkInCheckOutDao.saveCheckOut(checkInCheckOut, device, request);
		} catch (Exception e) {
			LOGGER.error("Error occur while save checkOut data /n" + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	/* Display Total Login Time of Employee by userId */
	@Override
	public List<CheckInCheckOut> getTotalTime(String userId) throws Exception {
		try {
			return checkInCheckOutDao.getTotalTime(userId);
		} catch (Exception e) {
			LOGGER.error("Error occur while display current user list" + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	/* Display Data for Employee Weekly */
	@Override
	public List<CheckInCheckOut> findByDayOfTheWeek(String from, String to, String userId) throws Exception {
		try {
			return checkInCheckOutDao.findByDayOfTheWeek(from, to, userId);
		} catch (Exception e) {
			LOGGER.error("Error occur while display current user weekly data list" + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	/* Mail Trigger */
	@Override
	public List<String> getNineHourNotComplete() throws Exception {
		List<String> checkInOutList = checkInCheckOutDao.getNineHourNotComplete();
		try {
			if (!checkInOutList.isEmpty()) {
				return checkInOutList;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display today date data" + ExceptionUtils.getStackTrace(e));
		}
		return checkInOutList;
	}

	/* Employee Upcoming Birthday */
	@Override
	public List<EmpPersonalDetails> getUpcomingEmpBirthday(String tenantId) throws Exception {
		List<EmpPersonalDetails> personalDetailsList = checkInCheckOutDao.getUpcomingEmpBirthday(tenantId);
		try {
			if (!personalDetailsList.isEmpty()) {
				return personalDetailsList;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display employees birthday " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	/* Update New Request */
	@Override
	public CheckInCheckOut updateNewRequest(CheckInCheckOut checkInCheckOut, Device device, HttpServletRequest request) throws Exception {
		try {
			checkInCheckOutDao.updateNewRequest(checkInCheckOut, device, request);
		} catch (Exception e) {
			LOGGER.error("Error occur while update new request" + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	/* Cancel New add req by employee */
	@Override
	public CheckInCheckOut cancelAddReq(CheckInCheckOut checkInCheckOut) throws Exception {
		try {
			checkInCheckOutDao.cancelAddReq(checkInCheckOut);
		} catch (Exception e) {
			LOGGER.error("Error occur while cancel request-----" + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	/* Display Employee Attendance request in Manager Dashboard */
	@Override
	public List<CheckInCheckOut> getAttendancePending(String userId, String tenantId) throws Exception {
		try {
			return checkInCheckOutDao.getAttendancePending(userId,tenantId);
		} catch (Exception e) {
			LOGGER.error("Error occur while display attendance request in manager dashboard" + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public List<String> getDateAndUserId() throws Exception {
		List<String> listOfUserWithDate = checkInCheckOutDao.getDateAndUserId();
		try {
			if (Objects.nonNull(listOfUserWithDate)) {
				return listOfUserWithDate;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get date and userId  " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public void insertEmployee(String userId, Date createdDate, String date, String dayOfTheWeek, String tenantId, String isActive,
			String checkinDateTime, String checkoutDateTime, String timeDuration, String status) throws Exception {
		try {
			checkInCheckOutDao.insertEmployee(userId, createdDate, date, dayOfTheWeek, tenantId, isActive, checkinDateTime,
					checkoutDateTime, timeDuration, status);
		} catch (Exception e) {
			LOGGER.error("Error occur while insert absent employee data " + ExceptionUtils.getStackTrace(e));
		}

	}

	@Override
	public CheckInCheckOut findByEmpId(String userId) throws Exception {
		CheckInCheckOut checkInCheckOut = checkInCheckOutDao.findByEmpId(userId);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while find employee by employee ID " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public Long getPresentDays(String userId) throws Exception {
		try {
			return checkInCheckOutDao.getPresentDays(userId);
		} catch (Exception e) {
			LOGGER.error("Error while get present days of employee in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public Long getLateDays(String userId) throws Exception {
		try {
			return checkInCheckOutDao.getLateDays(userId);
		} catch (Exception e) {
			LOGGER.error("Error while get late days of employee in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public Long getHalfDays(String userId) throws Exception {
		try {
			return checkInCheckOutDao.getHalfDays(userId);
		} catch (Exception e) {
			LOGGER.error("Error while get half days of employee in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public Long getAbsentDays(String userId) throws Exception {
		try {
			return checkInCheckOutDao.getAbsentDays(userId);
		} catch (Exception e) {
			LOGGER.error("Error while get absent days of employee in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public List<CheckInCheckOut> getNewReqList(String empId) throws Exception {
		List<CheckInCheckOut> checkInCheckOut = checkInCheckOutDao.getNewReqList(empId);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display new request list " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public List<CheckInCheckOut> cancelReqList(String empId) throws Exception {
		List<CheckInCheckOut> checkInCheckOut = checkInCheckOutDao.cancelReqList(empId);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display cancel request list " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public CheckInCheckOut sendMail(String userId) throws Exception {
		CheckInCheckOut checkInCheckOut = checkInCheckOutDao.sendMail(userId);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while send mail to hr & manager " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public List<CheckInCheckOut> getEmpWithManger(String empId, String tenantId) throws Exception {
		List<CheckInCheckOut> checkInCheckOut = checkInCheckOutDao.getEmpWithManger(empId, tenantId);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display employee record to manager " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public List<CheckInCheckOut> getAcceptLeaveById(Long id) throws Exception {
		List<CheckInCheckOut> checkInCheckOut = checkInCheckOutDao.getAcceptLeaveById(id);
		try {
			if (Objects.nonNull(checkInCheckOut)) {
				return checkInCheckOut;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while accept/reject request by id " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public void acceptStatus(String approvalReq, String status, String isActive, String flag, Long id)
			throws Exception {
		try {
			checkInCheckOutDao.acceptStatus(approvalReq, status, isActive, flag, id);
		} catch (Exception e) {
			LOGGER.error("Error occur while save data if manager accept/reject request " + ExceptionUtils.getStackTrace(e));
		}
	}

	@Override
	public List<CheckInCheckOut> getByUserIdAndCurentDate(List<String> userId) throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.getByUserIdAndCurentDate(userId); 
		try {
			if (Objects.nonNull(checkInCheckOuts)) {
				return checkInCheckOuts;
			} else {
				System.out.println("Null Data Found :::::");
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get list of userId with currentDate " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}
	@Override
	public List<CheckInCheckOut> getTotalAbsentEmp(String tenantId) throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.getTotalAbsentEmp(tenantId);
		try {
			if (Objects.nonNull(checkInCheckOuts)) {
				return checkInCheckOuts;
			} else {
				System.out.println("Null Data Get :::::::: ");
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get list of total absent emp " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}
	
	@Override
	public List<CheckInCheckOut> getTotalAttendance(String tenantId) throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.getTotalAttendance(tenantId);
		try {
			if (Objects.nonNull(checkInCheckOuts)) {
				return checkInCheckOuts;
			} else {
				System.out.println("Null Data Get :::::::: ");
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get list of total attendance " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}
	
	@Override
	public List<CheckInCheckOut> getTotalNewReq() throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.getTotalNewReq();
		try {
			if (Objects.nonNull(checkInCheckOuts)) {
				return checkInCheckOuts;
			} else {
				System.out.println("Null Data Get :::::::: ");
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get list of total new req. " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public Long getAllAttendance(String tenantId) throws Exception {
		try {
			return checkInCheckOutDao.getAllAttendance(tenantId);
		} catch (Exception e) {
			LOGGER.error("Error occuring while get all attendance of employees in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public Long getAllEmpAbsent(String tenantId) throws Exception {
		try {
			return checkInCheckOutDao.getAllEmpAbsent(tenantId);
		} catch (Exception e) {
			LOGGER.error("Error occuring while get all absent of employees in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public Long getAllNewReq(String tenantId) throws Exception {
		try {
			return checkInCheckOutDao.getAllNewReq(tenantId);
		} catch (Exception e) {
			LOGGER.error("Error occuring while get all new req of employees in current month " + ExceptionUtils.getStackTrace(e));
		}
		return (long) 0;
	}

	@Override
	public CheckInCheckOut findByDateAndCurrentUser2(String userId) throws Exception {
		CheckInCheckOut checkInOutList = checkInCheckOutDao.findByDateAndCurrentUser2(userId);
		try {
			if (checkInOutList != null) {
				return checkInOutList;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display current user with today date " + ExceptionUtils.getStackTrace(e));
		}
		return new CheckInCheckOut();
	}

	@Override
	public CheckInCheckOut notificationRead(Long id) throws Exception {
		try {
			checkInCheckOutDao.notificationRead(id);
		} catch (Exception e) {
			LOGGER.error("Error occur while save notification /n" + ExceptionUtils.getStackTrace(e));
		}
		return new CheckInCheckOut();
	}

	@Override
	public List<CheckInCheckOut> addNewReqNotificationBell(String userId) throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.addNewReqNotificationBell(userId);
		try {
			if (checkInCheckOuts != null) {
				return checkInCheckOuts;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display list of notification " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public List<CheckInCheckOut> unreadNotification(String userId) throws Exception {
		List<CheckInCheckOut> checkInCheckOuts = checkInCheckOutDao.unreadNotification(userId);
		try {
			if (checkInCheckOuts != null) {
				return checkInCheckOuts;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while display list of unread notification " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}

	@Override
	public CheckInCheckOut getCurrentUserWithId(String userId, Long id) throws Exception {
		CheckInCheckOut checkInCheckOut = new CheckInCheckOut();
		try {
			checkInCheckOut = checkInCheckOutDao.getCurrentUserWithId(userId, id);
		} catch (Exception e) {
			LOGGER.error("Error occur while get details of user " + ExceptionUtils.getStackTrace(e));
		}
		return checkInCheckOut;
	}

	@Override
	public List<CheckInCheckOut> currentWeekData(String from, String to, String userId, String isActive) throws Exception {
		List<CheckInCheckOut> currentWeekData = checkInCheckOutDao.currentWeekData(from,to,userId,isActive);
		try {
			if(Objects.nonNull(currentWeekData)) {
				return currentWeekData;
			}
		} catch (Exception e) {
			LOGGER.error("Error occur while get current week data  " + ExceptionUtils.getStackTrace(e));
		}
		return new ArrayList<>();
	}
}